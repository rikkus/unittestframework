#ifndef UNIT_TEST_MACROS_H
#define UNIT_TEST_MACROS_H

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
#define TEST_DATA(klassName) \
class klassName##TestBase : public Unit::TestBase \
{ \
  public: \
\
    klassName##TestBase() \
      : Unit::TestBase(), \
        className_(#klassName) \
    { \
      /* Empty. */ \
    }\
\
    virtual std::string className() const { return className_; } \
    virtual std::string testName() const = 0; \
    virtual bool passed() const = 0; \
\
    void setUp(); \
    void tearDown(); \
\
  private: \
\
    std::string className_; \
\
  protected:

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
#define TEST_END_DATA(className) \
};

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
#define TEST(className, name) \
class className##name##Test : public className##TestBase \
{ \
  public: \
\
    className##name##Test() \
      : className##TestBase(), \
        testName_(#name), \
        passed_(true) \
    { \
      Unit::TestRegistry::instance()->addTest(this); \
    } \
\
    virtual std::string testName() const { return testName_; } \
    void run(); \
    virtual bool passed() const { return passed_; } \
\
  private: \
\
    std::string testName_; \
    bool passed_; \
}; \
\
className##name##Test className##name##Instance; \
\
void className##name##Test::run()

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
#define TEST_SET_UP(className) \
void className##TestBase::setUp()

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
#define TEST_NO_SET_UP_NECESSARY(className) \
void className##TestBase::setUp() { /* Empty. */ }

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
#define TEST_TEAR_DOWN(className) \
void className##TestBase::tearDown()

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
#define TEST_NO_TEAR_DOWN_NECESSARY(className) \
void className##TestBase::tearDown() { /* Empty. */ }

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
#define UNIT_TESTS \
extern "C" { void * testRegistryInstance(); }

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
#define UNIT_TEST_SUITE \
Unit::TestRegistry * Unit::TestRegistry::instance_ = 0; \
extern "C" { \
  void * testRegistryInstance() \
  { \
    return Unit::TestRegistry::instance(); \
  } \
}

#endif // UNIT_TEST_MACROS_H
